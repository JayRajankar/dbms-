
Question 1: 
Draw an ER for Bank database with atleast 5 entities and convert them into tables.
Perform DDL on above converted tables.
1. Create tables with all constraints
2. Create views on any two tables using join conditions
3. Create index called CustomerId. Entries should be in ascending order by customer name.
4. Create sequence on Acctno.
==========================================================

Theory:
-------
In a banking system, we often deal with multiple related entities such as customers, accounts,
branches, loans, and transactions. To convert an ER diagram to a relational schema, we follow
these steps:

1. **Entities become tables** – Each entity (Customer, Account, etc.) is represented as a table.
2. **Attributes become columns** – Each attribute of the entity becomes a column in the table.
3. **Primary Keys** – Uniquely identify rows within a table.
4. **Foreign Keys** – Represent relationships between entities.
5. **Views** – Virtual tables that help present data from multiple tables in a meaningful format.
6. **Indexes** – Improve search performance; in this case, we index by customer name.
7. **Sequences (in MySQL: AUTO_INCREMENT)** – Generate unique values automatically, used here for account numbers and IDs.

SQL Implementation:
-------------------

-- STEP 1: Create and select database
CREATE DATABASE BankDB;
USE BankDB;

-- STEP 2: Tables and Constraints
CREATE TABLE Customer (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    address VARCHAR(100),
    phone VARCHAR(15) UNIQUE
);

CREATE TABLE Branch (
    branch_id INT AUTO_INCREMENT PRIMARY KEY,
    branch_name VARCHAR(50),
    location VARCHAR(100)
);

CREATE TABLE Account (
    acct_no INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    branch_id INT,
    balance DECIMAL(10,2) CHECK (balance >= 0),
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id),
    FOREIGN KEY (branch_id) REFERENCES Branch(branch_id)
);

CREATE TABLE Loan (
    loan_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    branch_id INT,
    amount DECIMAL(10,2),
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id),
    FOREIGN KEY (branch_id) REFERENCES Branch(branch_id)
);

CREATE TABLE Transaction (
    txn_id INT AUTO_INCREMENT PRIMARY KEY,
    acct_no INT,
    txn_type VARCHAR(10) CHECK (txn_type IN ('deposit', 'withdraw')),
    amount DECIMAL(10,2),
    txn_date DATE,
    FOREIGN KEY (acct_no) REFERENCES Account(acct_no)
);

-- STEP 3: Sample Data
INSERT INTO Customer (name, address, phone) VALUES 
('Pranav Bhosale', 'Pune', '9988776655'),
('Jay Rajankar', 'Mumbai', '9977665544'),
('Anvay Kulkarni', 'Nashik', '8877665544'),
('Krishna Gandhi', 'Nagpur', '7788556699'),
('Gaurav Kaushalye', 'Aurangabad', '8899001122');

INSERT INTO Branch (branch_name, location) VALUES
('Pune Main', 'Pune'),
('Mumbai Central', 'Mumbai'),
('Nashik City', 'Nashik'),
('Nagpur Hub', 'Nagpur'),
('Aurangabad Branch', 'Aurangabad');

INSERT INTO Account (customer_id, branch_id, balance) VALUES
(1, 1, 15000.00),
(2, 2, 12000.00),
(3, 3, 18000.00),
(4, 4, 9500.00),
(5, 5, 11000.00);

INSERT INTO Loan (customer_id, branch_id, amount) VALUES
(1, 1, 50000.00),
(2, 2, 45000.00),
(3, 3, 62000.00),
(4, 4, 30000.00),
(5, 5, 38000.00);

INSERT INTO Transaction (acct_no, txn_type, amount, txn_date) VALUES
(1, 'deposit', 2000.00, '2024-01-10'),
(2, 'withdraw', 1000.00, '2024-02-05'),
(3, 'deposit', 500.00, '2024-03-15'),
(4, 'withdraw', 1200.00, '2024-04-10'),
(5, 'deposit', 2500.00, '2024-05-01');

-- STEP 4: Views
-- Why Views? They allow you to simplify complex joins and create reusable data layers.

CREATE VIEW Customer_Account_View AS
SELECT c.name AS customer_name, a.acct_no, a.balance, b.branch_name
FROM Customer c
JOIN Account a ON c.customer_id = a.customer_id
JOIN Branch b ON a.branch_id = b.branch_id;

CREATE VIEW Customer_Loan_View AS
SELECT c.name AS customer_name, l.loan_id, l.amount, b.branch_name
FROM Customer c
JOIN Loan l ON c.customer_id = l.customer_id
JOIN Branch b ON l.branch_id = b.branch_id;

-- STEP 5: Index
-- Why Index? Improves the speed of data retrieval on columns used in WHERE/ORDER BY.
CREATE INDEX idx_customer_name ON Customer(name ASC);

-- STEP 6: Sequence Simulation (in MySQL)
-- In MySQL, AUTO_INCREMENT takes care of sequence generation. You can check it like this:
-- SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'Account';

Validation Queries:
-------------------

-- View customer account details
SELECT * FROM Customer_Account_View;

-- View customer loan details
SELECT * FROM Customer_Loan_View;

-- Validate index by ordering customers
SELECT * FROM Customer ORDER BY name;

-- Show auto-increment value (simulates sequence)
SELECT AUTO_INCREMENT 
FROM information_schema.tables 
WHERE table_name = 'Account' AND table_schema = 'BankDB';
